-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\nrhdlSSBDetectionFR1Core\Polyphase_Decimator.vhd
-- Created: 2021-11-30 14:25:27
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Polyphase_Decimator
-- Source Path: nrhdlSSBDetectionFR1Core/ssbDetectionCore/Frequency Correction and DDC/DDC/FR1/Stage 3/Polyphase 
-- Decimato
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Polyphase_Decimator_ST3 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        validIn                           :   IN    std_logic;
        phase0_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        phase0_im                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        phase1_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        phase1_im                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        validOut                          :   OUT   std_logic
        );
END Polyphase_Decimator_ST3;


ARCHITECTURE rtl OF Polyphase_Decimator_ST3 IS

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL phase0_re_tmp                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL phase0_im_tmp                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL phase1_re_tmp                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL phase1_im_tmp                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL reg_count                        : std_logic;  -- ufix1
  SIGNAL reg_dataIn_re                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL reg_dataIn_im                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL reg_phase0_re                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL reg_phase0_im                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL reg_phase1_re                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL reg_phase1_im                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL reg_validOut                     : std_logic;
  SIGNAL reg_not_empty                    : std_logic;
  SIGNAL reg_count_next                   : std_logic;  -- ufix1
  SIGNAL reg_dataIn_next_re               : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL reg_dataIn_next_im               : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL reg_phase0_next_re               : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL reg_phase0_next_im               : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL reg_phase1_next_re               : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL reg_phase1_next_im               : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL reg_validOut_next                : std_logic;
  SIGNAL reg_not_empty_next               : std_logic;

BEGIN
  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Polyphase_Decimator_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reg_not_empty <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        reg_count <= reg_count_next;
        reg_dataIn_re <= reg_dataIn_next_re;
        reg_dataIn_im <= reg_dataIn_next_im;
        reg_phase0_re <= reg_phase0_next_re;
        reg_phase0_im <= reg_phase0_next_im;
        reg_phase1_re <= reg_phase1_next_re;
        reg_phase1_im <= reg_phase1_next_im;
        reg_validOut <= reg_validOut_next;
        reg_not_empty <= reg_not_empty_next;
      END IF;
    END IF;
  END PROCESS Polyphase_Decimator_1_process;

  Polyphase_Decimator_1_output : PROCESS (dataIn_im_signed, dataIn_re_signed, reg_count, reg_dataIn_im, reg_dataIn_re,
       reg_not_empty, reg_phase0_im, reg_phase0_re, reg_phase1_im,
       reg_phase1_re, reg_validOut, validIn)
    VARIABLE next_count : std_logic;
    VARIABLE reg_dataIn_temp_re : signed(15 DOWNTO 0);
    VARIABLE reg_dataIn_temp_im : signed(15 DOWNTO 0);
    VARIABLE reg_phase0_temp_re : signed(15 DOWNTO 0);
    VARIABLE reg_phase0_temp_im : signed(15 DOWNTO 0);
    VARIABLE reg_phase1_temp_re : signed(15 DOWNTO 0);
    VARIABLE reg_phase1_temp_im : signed(15 DOWNTO 0);
    VARIABLE add_cast : unsigned(1 DOWNTO 0);
    VARIABLE add_temp : unsigned(1 DOWNTO 0);
  BEGIN
    add_temp := to_unsigned(16#0#, 2);
    add_cast := to_unsigned(16#0#, 2);
    next_count := reg_count;
    reg_dataIn_temp_re := reg_dataIn_re;
    reg_dataIn_temp_im := reg_dataIn_im;
    reg_phase0_temp_re := reg_phase0_re;
    reg_phase0_temp_im := reg_phase0_im;
    reg_phase1_temp_re := reg_phase1_re;
    reg_phase1_temp_im := reg_phase1_im;
    validOut <= reg_validOut;
    reg_not_empty_next <= reg_not_empty;
    IF ( NOT reg_not_empty) = '1' THEN 
      next_count := '0';
      reg_dataIn_temp_re := to_signed(16#0000#, 16);
      reg_dataIn_temp_im := to_signed(16#0000#, 16);
      reg_phase0_temp_re := to_signed(16#0000#, 16);
      reg_phase0_temp_im := to_signed(16#0000#, 16);
      reg_phase1_temp_re := to_signed(16#0000#, 16);
      reg_phase1_temp_im := to_signed(16#0000#, 16);
      validOut <= '0';
      reg_not_empty_next <= '1';
    END IF;
    reg_dataIn_next_re <= reg_dataIn_temp_re;
    reg_dataIn_next_im <= reg_dataIn_temp_im;
    reg_phase0_next_re <= reg_phase0_temp_re;
    reg_phase0_next_im <= reg_phase0_temp_im;
    reg_phase1_next_re <= reg_phase1_temp_re;
    reg_phase1_next_im <= reg_phase1_temp_im;
    IF validIn = '1' THEN 
      reg_dataIn_next_re <= dataIn_re_signed;
      reg_dataIn_next_im <= dataIn_im_signed;
    END IF;
    IF (validIn AND ( NOT next_count)) = '1' THEN 
      reg_phase0_next_re <= dataIn_re_signed;
      reg_phase0_next_im <= dataIn_im_signed;
      reg_phase1_next_re <= reg_dataIn_temp_re;
      reg_phase1_next_im <= reg_dataIn_temp_im;
      reg_validOut_next <= '1';
    ELSE 
      reg_validOut_next <= '0';
    END IF;
    IF validIn = '1' THEN 
      add_cast := '0' & next_count;
      add_temp := add_cast + to_unsigned(16#1#, 2);
      next_count := add_temp(0);
    END IF;
    phase0_re_tmp <= reg_phase0_temp_re;
    phase0_im_tmp <= reg_phase0_temp_im;
    phase1_re_tmp <= reg_phase1_temp_re;
    phase1_im_tmp <= reg_phase1_temp_im;
    reg_count_next <= next_count;
  END PROCESS Polyphase_Decimator_1_output;


  phase0_re <= std_logic_vector(phase0_re_tmp);

  phase0_im <= std_logic_vector(phase0_im_tmp);

  phase1_re <= std_logic_vector(phase1_re_tmp);

  phase1_im <= std_logic_vector(phase1_im_tmp);

END rtl;


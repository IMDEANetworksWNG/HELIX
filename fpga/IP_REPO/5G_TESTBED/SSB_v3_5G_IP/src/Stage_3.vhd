-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\nrhdlSSBDetectionFR1Core\Stage_3.vhd
-- Created: 2021-11-30 14:25:27
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.2
-- Target subsystem base rate: 0.2
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.2
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- dataOut_re                    ce_out        0.2
-- dataOut_im                    ce_out        0.2
-- validOut                      ce_out        0.2
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Stage_3
-- Source Path: nrhdlSSBDetectionFR1Core/ssbDetectionCore/Frequency Correction and DDC/DDC/FR1/Stage 3
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Stage_3 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        validIn                           :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        validOut                          :   OUT   std_logic
        );
END Stage_3;


ARCHITECTURE rtl OF Stage_3 IS

  -- Component Declarations
  COMPONENT Polyphase_Decimator_ST3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          validIn                         :   IN    std_logic;
          phase0_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          phase0_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          phase1_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          phase1_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT FIR_1_ST3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
          dataOut_im                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Centre_Tap_ST3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En16
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En16
          );
  END COMPONENT;

--  -- Component Configuration Statements
--  FOR ALL : Polyphase_Decimator
--    USE ENTITY work.Polyphase_Decimator(rtl);

--  FOR ALL : FIR_1
--    USE ENTITY work.FIR_1(rtl);

--  FOR ALL : Centre_Tap
--    USE ENTITY work.Centre_Tap(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL phase0_re                        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL phase0_im                        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL phase1_re                        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL phase1_im                        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL validOut_1                       : std_logic;
  SIGNAL firDataOut_re                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL firDataOut_im                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL validOut_2                       : std_logic;
  SIGNAL firDataOut_re_signed             : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL firDataOut_im_signed             : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL Centre_Tap_out1_re               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Centre_Tap_out1_im               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Centre_Tap_out1_re_signed        : signed(15 DOWNTO 0);  -- sfix16_En16
  SIGNAL Centre_Tap_out1_im_signed        : signed(15 DOWNTO 0);  -- sfix16_En16
  SIGNAL Add_add_cast                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Add_add_cast_1                   : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Add_add_cast_2                   : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Add_add_cast_3                   : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Add_out1_re                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Add_out1_im                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay_out1_re                    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay_out1_im                    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Data_Type_Conversion_out1_re     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Data_Type_Conversion_out1_im     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay2_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay2_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay3_out1                      : std_logic;

BEGIN
  -- Input data type must be sfix16_En15

  u_Polyphase_Decimator : Polyphase_Decimator_ST3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              dataIn_re => dataIn_re,  -- sfix16_En15
              dataIn_im => dataIn_im,  -- sfix16_En15
              validIn => validIn,
              phase0_re => phase0_re,  -- sfix16_En15
              phase0_im => phase0_im,  -- sfix16_En15
              phase1_re => phase1_re,  -- sfix16_En15
              phase1_im => phase1_im,  -- sfix16_En15
              validOut => validOut_1
              );

  u_FIR_1 : FIR_1_ST3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              dataIn_re => phase0_re,  -- sfix16_En15
              dataIn_im => phase0_im,  -- sfix16_En15
              validIn => validOut_1,
              dataOut_re => firDataOut_re,  -- sfix32_En31
              dataOut_im => firDataOut_im,  -- sfix32_En31
              validOut => validOut_2
              );

  u_Centre_Tap : Centre_Tap_ST3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              dataIn_re => phase1_re,  -- sfix16_En15
              dataIn_im => phase1_im,  -- sfix16_En15
              validIn => validOut_1,
              dataOut_re => Centre_Tap_out1_re,  -- sfix16_En16
              dataOut_im => Centre_Tap_out1_im  -- sfix16_En16
              );

  firDataOut_re_signed <= signed(firDataOut_re);

  firDataOut_im_signed <= signed(firDataOut_im);

  Centre_Tap_out1_re_signed <= signed(Centre_Tap_out1_re);

  Centre_Tap_out1_im_signed <= signed(Centre_Tap_out1_im);

  Add_add_cast <= resize(firDataOut_re_signed, 33);
  Add_add_cast_1 <= resize(Centre_Tap_out1_re_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  Add_out1_re <= Add_add_cast + Add_add_cast_1;
  Add_add_cast_2 <= resize(firDataOut_im_signed, 33);
  Add_add_cast_3 <= resize(Centre_Tap_out1_im_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  Add_out1_im <= Add_add_cast_2 + Add_add_cast_3;

  enb <= clk_enable;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1_re <= to_signed(0, 33);
      Delay_out1_im <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1_re <= Add_out1_re;
        Delay_out1_im <= Add_out1_im;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Data_Type_Conversion_out1_re <= X"7FFF" WHEN ((Delay_out1_re(32) = '0') AND (Delay_out1_re(31) /= '0')) OR ((Delay_out1_re(32) = '0') AND (Delay_out1_re(31 DOWNTO 16) = X"7FFF")) ELSE
      X"8000" WHEN (Delay_out1_re(32) = '1') AND (Delay_out1_re(31) /= '1') ELSE
      Delay_out1_re(31 DOWNTO 16) + ('0' & (Delay_out1_re(15) AND (( NOT Delay_out1_re(32)) OR (Delay_out1_re(14) OR Delay_out1_re(13) OR Delay_out1_re(12) OR Delay_out1_re(11) OR Delay_out1_re(10) OR Delay_out1_re(9) OR Delay_out1_re(8) OR Delay_out1_re(7) OR Delay_out1_re(6) OR Delay_out1_re(5) OR Delay_out1_re(4) OR Delay_out1_re(3) OR Delay_out1_re(2) OR Delay_out1_re(1) OR Delay_out1_re(0)))));
  
  Data_Type_Conversion_out1_im <= X"7FFF" WHEN ((Delay_out1_im(32) = '0') AND (Delay_out1_im(31) /= '0')) OR ((Delay_out1_im(32) = '0') AND (Delay_out1_im(31 DOWNTO 16) = X"7FFF")) ELSE
      X"8000" WHEN (Delay_out1_im(32) = '1') AND (Delay_out1_im(31) /= '1') ELSE
      Delay_out1_im(31 DOWNTO 16) + ('0' & (Delay_out1_im(15) AND (( NOT Delay_out1_im(32)) OR (Delay_out1_im(14) OR Delay_out1_im(13) OR Delay_out1_im(12) OR Delay_out1_im(11) OR Delay_out1_im(10) OR Delay_out1_im(9) OR Delay_out1_im(8) OR Delay_out1_im(7) OR Delay_out1_im(6) OR Delay_out1_im(5) OR Delay_out1_im(4) OR Delay_out1_im(3) OR Delay_out1_im(2) OR Delay_out1_im(1) OR Delay_out1_im(0)))));

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_re <= to_signed(16#0000#, 16);
      Delay2_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1_re <= Data_Type_Conversion_out1_re;
        Delay2_out1_im <= Data_Type_Conversion_out1_im;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  dataOut_re <= std_logic_vector(Delay2_out1_re);

  dataOut_im <= std_logic_vector(Delay2_out1_im);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= validOut_2;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  ce_out <= clk_enable;

  validOut <= Delay3_out1;

END rtl;


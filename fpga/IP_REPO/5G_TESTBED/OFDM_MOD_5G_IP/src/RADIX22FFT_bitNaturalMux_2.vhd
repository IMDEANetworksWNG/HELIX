-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\FFTHDLOptimizedExample_Streaming\RADIX22FFT_bitNaturalMux_2.vhd
-- Created: 2022-05-04 13:42:43
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_bitNaturalMux_2
-- Source Path: FFTHDLOptimizedExample_Streaming/FFT HDL Optimized Streaming/FFT HDL Optimized/RADIX22FFT_bitNaturalMux_2
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.FFT_HDL_Optimized_Streaming_pkg.ALL;

ENTITY RADIX22FFT_bitNaturalMux_2 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dMem_re_v                         :   IN    vector_of_std_logic_vector27(0 TO 1);  -- sfix27_En13 [2]
        dMem_im_v                         :   IN    vector_of_std_logic_vector27(0 TO 1);  -- sfix27_En13 [2]
        dMem_vld1                         :   IN    std_logic;
        dMux_re2                          :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En13
        dMux_im2                          :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En13
        );
END RADIX22FFT_bitNaturalMux_2;


ARCHITECTURE rtl OF RADIX22FFT_bitNaturalMux_2 IS

  -- Signals
  SIGNAL outMuxSel_idx                    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL outMuxSel_MUXSelReg1             : std_logic;  -- ufix1
  SIGNAL outMuxSel_MUXSelVldReg1          : std_logic;
  SIGNAL outMuxSel_sampleCnt              : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL outMuxSel_idx_next               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL outMuxSel_MUXSelReg1_next        : std_logic;  -- ufix1
  SIGNAL outMuxSel_MUXSelVldReg1_next     : std_logic;
  SIGNAL outMuxSel_sampleCnt_next         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL MUXSel                           : std_logic;  -- ufix1
  SIGNAL MUXSel_vld                       : std_logic;
  SIGNAL dMem_re_v_0                      : signed(26 DOWNTO 0);  -- sfix27_En13
  SIGNAL dMem_re_reg1                     : signed(26 DOWNTO 0);  -- sfix27_En13
  SIGNAL dMem_re_v_1                      : signed(26 DOWNTO 0);  -- sfix27_En13
  SIGNAL dMem_re_reg2                     : signed(26 DOWNTO 0);  -- sfix27_En13
  SIGNAL dMux_re                          : signed(26 DOWNTO 0);  -- sfix27_En13
  SIGNAL dMux_re2_tmp                     : signed(26 DOWNTO 0);  -- sfix27_En13
  SIGNAL dMem_im_v_0                      : signed(26 DOWNTO 0);  -- sfix27_En13
  SIGNAL dMem_im_reg1                     : signed(26 DOWNTO 0);  -- sfix27_En13
  SIGNAL dMem_im_v_1                      : signed(26 DOWNTO 0);  -- sfix27_En13
  SIGNAL dMem_im_reg2                     : signed(26 DOWNTO 0);  -- sfix27_En13
  SIGNAL dMux_im                          : signed(26 DOWNTO 0);  -- sfix27_En13
  SIGNAL dMux_im2_tmp                     : signed(26 DOWNTO 0);  -- sfix27_En13

BEGIN
  -- outMuxSel
  outMuxSel_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      outMuxSel_MUXSelReg1 <= '0';
      outMuxSel_MUXSelVldReg1 <= '0';
      outMuxSel_idx <= to_unsigned(16#001#, 11);
      outMuxSel_sampleCnt <= to_unsigned(16#000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      outMuxSel_idx <= outMuxSel_idx_next;
      outMuxSel_MUXSelReg1 <= outMuxSel_MUXSelReg1_next;
      outMuxSel_MUXSelVldReg1 <= outMuxSel_MUXSelVldReg1_next;
      outMuxSel_sampleCnt <= outMuxSel_sampleCnt_next;
    END IF;
  END PROCESS outMuxSel_process;

  outMuxSel_output : PROCESS (dMem_vld1, outMuxSel_MUXSelReg1, outMuxSel_MUXSelVldReg1, outMuxSel_idx,
       outMuxSel_sampleCnt)
    VARIABLE t_0 : unsigned(9 DOWNTO 0);
  BEGIN
    outMuxSel_idx_next <= outMuxSel_idx;
    outMuxSel_sampleCnt_next <= outMuxSel_sampleCnt;
    t_0 := unsigned'(outMuxSel_sampleCnt(0) & outMuxSel_sampleCnt(1) & outMuxSel_sampleCnt(2) & outMuxSel_sampleCnt(3) & outMuxSel_sampleCnt(4) & outMuxSel_sampleCnt(5) & outMuxSel_sampleCnt(6) & outMuxSel_sampleCnt(7) & outMuxSel_sampleCnt(8) & outMuxSel_sampleCnt(9));
    outMuxSel_MUXSelReg1_next <= t_0(0) XOR '1';
    outMuxSel_MUXSelVldReg1_next <= dMem_vld1;
    IF dMem_vld1 = '1' THEN 
      outMuxSel_idx_next <= outMuxSel_idx + to_unsigned(16#002#, 11);
      outMuxSel_sampleCnt_next <= outMuxSel_sampleCnt + to_unsigned(16#001#, 10);
    END IF;
    MUXSel <= outMuxSel_MUXSelReg1;
    MUXSel_vld <= outMuxSel_MUXSelVldReg1;
  END PROCESS outMuxSel_output;


  dMem_re_v_0 <= signed(dMem_re_v(0));

  intdelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dMem_re_reg1 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      dMem_re_reg1 <= dMem_re_v_0;
    END IF;
  END PROCESS intdelay_process;


  dMem_re_v_1 <= signed(dMem_re_v(1));

  intdelay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dMem_re_reg2 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      dMem_re_reg2 <= dMem_re_v_1;
    END IF;
  END PROCESS intdelay_1_process;


  
  dMux_re <= dMem_re_reg1 WHEN MUXSel = '0' ELSE
      dMem_re_reg2;

  intdelay_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dMux_re2_tmp <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF MUXSel_vld = '1' THEN
        dMux_re2_tmp <= dMux_re;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  dMux_re2 <= std_logic_vector(dMux_re2_tmp);

  dMem_im_v_0 <= signed(dMem_im_v(0));

  intdelay_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dMem_im_reg1 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      dMem_im_reg1 <= dMem_im_v_0;
    END IF;
  END PROCESS intdelay_3_process;


  dMem_im_v_1 <= signed(dMem_im_v(1));

  intdelay_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dMem_im_reg2 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      dMem_im_reg2 <= dMem_im_v_1;
    END IF;
  END PROCESS intdelay_4_process;


  
  dMux_im <= dMem_im_reg1 WHEN MUXSel = '0' ELSE
      dMem_im_reg2;

  intdelay_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dMux_im2_tmp <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF MUXSel_vld = '1' THEN
        dMux_im2_tmp <= dMux_im;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  dMux_im2 <= std_logic_vector(dMux_im2_tmp);

END rtl;


-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\HBF_64_test_simulink\iSection.vhd
-- Created: 2021-12-08 13:38:15
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: iSection
-- Source Path: HBF_64_test_simulink/HBF_x8/hb0a/CICDecimation/iSection
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.HBF_x8_pkg.ALL;

ENTITY iSection IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataInreg_re                      :   IN    vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
        dataInreg_im                      :   IN    vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
        validInreg                        :   IN    std_logic;
        internalReset                     :   IN    std_logic;
        integOut_re                       :   OUT   vector_of_std_logic_vector18(0 TO 1);  -- sfix18_En15 [2]
        integOut_im                       :   OUT   vector_of_std_logic_vector18(0 TO 1);  -- sfix18_En15 [2]
        i_vout                            :   OUT   std_logic;
        i_rstout                          :   OUT   std_logic
        );
END iSection;


ARCHITECTURE rtl OF iSection IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL alpha_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL validInregN2                     : std_logic;
  SIGNAL alpha_reg_1                      : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL validInregN3                     : std_logic;
  SIGNAL alpha_reg_2                      : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL internalResetN2                  : std_logic;
  SIGNAL alpha_reg_3                      : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL internalResetN3                  : std_logic;
  SIGNAL inmuxre                          : vector_of_signed16(0 TO 1);  -- sfix16_En15 [2]
  SIGNAL inputBuffer1_regVecre            : vector_of_signed16(0 TO 3);  -- sfix16 [4]
  SIGNAL inputBuffer1_regVecre_next       : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL inbufferre                       : vector_of_signed16(0 TO 1);  -- sfix16_En15 [2]
  SIGNAL inbufferre_0                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL addOutregN1_re_1_1               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL adder_add_cast                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN1out_re_1_1            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL inbufferre_1                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL addOutregN1_re_2_1               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL adder_add_cast_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN1out_re_2_1            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL part1RegN1_re2                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN1out_re_1_2            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN1_re_1_2               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL dataOutIntN1_re1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN2_re_1_1               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN2out_re_1_1            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN1out_re_2_2            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN1_re_2_2               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL dataOutIntN1_re2                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN2_re_2_1               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN2out_re_2_1            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL part1RegN2_re2                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN2out_re_1_2            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN2_re_1_2               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL dataOutIntN2_re1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL iOut_re1                         : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN2out_re_2_2            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN2_re_2_2               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL dataOutIntN2_re2                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL iOut_re2                         : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL integOut_re_tmp                  : vector_of_signed18(0 TO 1);  -- sfix18_En15 [2]
  SIGNAL inmuxim                          : vector_of_signed16(0 TO 1);  -- sfix16_En15 [2]
  SIGNAL inputBuffer2_regVecim            : vector_of_signed16(0 TO 3);  -- sfix16 [4]
  SIGNAL inputBuffer2_regVecim_next       : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL inbufferim                       : vector_of_signed16(0 TO 1);  -- sfix16_En15 [2]
  SIGNAL inbufferim_0                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL addOutregN1_im_1_1               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL adder_add_cast_2                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN1out_im_1_1            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL inbufferim_1                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL addOutregN1_im_2_1               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL adder_add_cast_3                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN1out_im_2_1            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL part1RegN1_im2                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN1out_im_1_2            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN1_im_1_2               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL dataOutIntN1_im1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN2_im_1_1               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN2out_im_1_1            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN1out_im_2_2            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN1_im_2_2               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL dataOutIntN1_im2                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN2_im_2_1               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN2out_im_2_1            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL part1RegN2_im2                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN2out_im_1_2            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN2_im_1_2               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL dataOutIntN2_im1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL iOut_im1                         : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN2out_im_2_2            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL addOutregN2_im_2_2               : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL dataOutIntN2_im2                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL iOut_im2                         : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL integOut_im_tmp                  : vector_of_signed18(0 TO 1);  -- sfix18_En15 [2]
  SIGNAL i_voutreg                        : std_logic;
  SIGNAL i_rstoutreg                      : std_logic;
  SIGNAL vectIntValid_stateInt            : std_logic;
  SIGNAL vectIntValid_countVect           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL vectIntValid_stateInt_next       : std_logic;
  SIGNAL vectIntValid_stateInt_temp       : std_logic;

BEGIN
  c_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg(0) <= validInreg;
        alpha_reg(1 TO 2) <= alpha_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS c_process;

  validInregN2 <= alpha_reg(2);

  c_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_1(0) <= validInregN2;
        alpha_reg_1(1 TO 2) <= alpha_reg_1(0 TO 1);
      END IF;
    END IF;
  END PROCESS c_1_process;

  validInregN3 <= alpha_reg_1(2);

  c_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_2 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_2(0) <= internalReset;
        alpha_reg_2(1 TO 2) <= alpha_reg_2(0 TO 1);
      END IF;
    END IF;
  END PROCESS c_2_process;

  internalResetN2 <= alpha_reg_2(2);

  c_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_3 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_3(0) <= internalResetN2;
        alpha_reg_3(1 TO 2) <= alpha_reg_3(0 TO 1);
      END IF;
    END IF;
  END PROCESS c_3_process;

  internalResetN3 <= alpha_reg_3(2);

  inmuxre(0) <= signed(dataInreg_re(0));
  inmuxre(1) <= signed(dataInreg_re(1));

  inputBuffer1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      inputBuffer1_regVecre(0) <= to_signed(16#0000#, 16);
      inputBuffer1_regVecre(1) <= to_signed(16#0000#, 16);
      inputBuffer1_regVecre(2) <= to_signed(16#0000#, 16);
      inputBuffer1_regVecre(3) <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        inputBuffer1_regVecre(0) <= inputBuffer1_regVecre_next(0);
        inputBuffer1_regVecre(1) <= inputBuffer1_regVecre_next(1);
        inputBuffer1_regVecre(2) <= inputBuffer1_regVecre_next(2);
        inputBuffer1_regVecre(3) <= inputBuffer1_regVecre_next(3);
      END IF;
    END IF;
  END PROCESS inputBuffer1_process;

  inbufferre(0) <= inputBuffer1_regVecre(0);
  inbufferre(1) <= inputBuffer1_regVecre(1);
  
  inputBuffer1_regVecre_next(0) <= to_signed(16#0000#, 16) WHEN internalReset /= '0' ELSE
      inputBuffer1_regVecre(2) WHEN validInreg /= '0' ELSE
      inputBuffer1_regVecre(0);
  
  inputBuffer1_regVecre_next(1) <= to_signed(16#0000#, 16) WHEN internalReset /= '0' ELSE
      inputBuffer1_regVecre(3) WHEN validInreg /= '0' ELSE
      inputBuffer1_regVecre(1);
  
  inputBuffer1_regVecre_next(2) <= to_signed(16#0000#, 16) WHEN internalReset /= '0' ELSE
      inmuxre(0) WHEN validInreg /= '0' ELSE
      inputBuffer1_regVecre(2);
  
  inputBuffer1_regVecre_next(3) <= to_signed(16#0000#, 16) WHEN internalReset /= '0' ELSE
      inmuxre(1) WHEN validInreg /= '0' ELSE
      inputBuffer1_regVecre(3);

  inbufferre_0 <= inbufferre(0);

  adder_add_cast <= resize(inbufferre_0, 18);
  addOutregN1out_re_1_1 <= adder_add_cast + addOutregN1_re_1_1;

  intdelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addOutregN1_re_1_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          addOutregN1_re_1_1 <= to_signed(16#00000#, 18);
        ELSIF validInreg = '1' THEN
          addOutregN1_re_1_1 <= addOutregN1out_re_1_1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  inbufferre_1 <= inbufferre(1);

  adder_add_cast_1 <= resize(inbufferre_1, 18);
  addOutregN1out_re_2_1 <= adder_add_cast_1 + addOutregN1_re_2_1;

  intdelay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addOutregN1_re_2_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          addOutregN1_re_2_1 <= to_signed(16#00000#, 18);
        ELSIF validInreg = '1' THEN
          addOutregN1_re_2_1 <= addOutregN1out_re_2_1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      part1RegN1_re2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        part1RegN1_re2 <= addOutregN1_re_2_1;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  addOutregN1out_re_1_2 <= addOutregN1_re_1_1 + part1RegN1_re2;

  intdelay_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addOutregN1_re_1_2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          addOutregN1_re_1_2 <= to_signed(16#00000#, 18);
        ELSE 
          addOutregN1_re_1_2 <= addOutregN1out_re_1_2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  intdelay_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataOutIntN1_re1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          dataOutIntN1_re1 <= to_signed(16#00000#, 18);
        ELSE 
          dataOutIntN1_re1 <= addOutregN1_re_1_2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  addOutregN2out_re_1_1 <= dataOutIntN1_re1 + addOutregN2_re_1_1;

  intdelay_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addOutregN2_re_1_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalResetN2 = '1' THEN
          addOutregN2_re_1_1 <= to_signed(16#00000#, 18);
        ELSIF validInregN2 = '1' THEN
          addOutregN2_re_1_1 <= addOutregN2out_re_1_1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  addOutregN1out_re_2_2 <= addOutregN1_re_1_1 + addOutregN1_re_2_1;

  intdelay_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addOutregN1_re_2_2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          addOutregN1_re_2_2 <= to_signed(16#00000#, 18);
        ELSE 
          addOutregN1_re_2_2 <= addOutregN1out_re_2_2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataOutIntN1_re2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          dataOutIntN1_re2 <= to_signed(16#00000#, 18);
        ELSE 
          dataOutIntN1_re2 <= addOutregN1_re_2_2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  addOutregN2out_re_2_1 <= dataOutIntN1_re2 + addOutregN2_re_2_1;

  intdelay_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addOutregN2_re_2_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalResetN2 = '1' THEN
          addOutregN2_re_2_1 <= to_signed(16#00000#, 18);
        ELSIF validInregN2 = '1' THEN
          addOutregN2_re_2_1 <= addOutregN2out_re_2_1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_8_process;


  intdelay_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      part1RegN2_re2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        part1RegN2_re2 <= addOutregN2_re_2_1;
      END IF;
    END IF;
  END PROCESS intdelay_9_process;


  addOutregN2out_re_1_2 <= addOutregN2_re_1_1 + part1RegN2_re2;

  intdelay_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addOutregN2_re_1_2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          addOutregN2_re_1_2 <= to_signed(16#00000#, 18);
        ELSE 
          addOutregN2_re_1_2 <= addOutregN2out_re_1_2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_10_process;


  intdelay_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataOutIntN2_re1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          dataOutIntN2_re1 <= to_signed(16#00000#, 18);
        ELSE 
          dataOutIntN2_re1 <= addOutregN2_re_1_2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_11_process;


  intdelay_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iOut_re1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalResetN3 = '1' THEN
          iOut_re1 <= to_signed(16#00000#, 18);
        ELSIF validInregN3 = '1' THEN
          iOut_re1 <= dataOutIntN2_re1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_12_process;


  addOutregN2out_re_2_2 <= addOutregN2_re_1_1 + addOutregN2_re_2_1;

  intdelay_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addOutregN2_re_2_2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          addOutregN2_re_2_2 <= to_signed(16#00000#, 18);
        ELSE 
          addOutregN2_re_2_2 <= addOutregN2out_re_2_2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_13_process;


  intdelay_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataOutIntN2_re2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          dataOutIntN2_re2 <= to_signed(16#00000#, 18);
        ELSE 
          dataOutIntN2_re2 <= addOutregN2_re_2_2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_14_process;


  intdelay_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iOut_re2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalResetN3 = '1' THEN
          iOut_re2 <= to_signed(16#00000#, 18);
        ELSIF validInregN3 = '1' THEN
          iOut_re2 <= dataOutIntN2_re2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_15_process;


  integOut_re_tmp(0) <= iOut_re1;
  integOut_re_tmp(1) <= iOut_re2;

  outputgen1: FOR k IN 0 TO 1 GENERATE
    integOut_re(k) <= std_logic_vector(integOut_re_tmp(k));
  END GENERATE;

  inmuxim(0) <= signed(dataInreg_im(0));
  inmuxim(1) <= signed(dataInreg_im(1));

  inputBuffer2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      inputBuffer2_regVecim(0) <= to_signed(16#0000#, 16);
      inputBuffer2_regVecim(1) <= to_signed(16#0000#, 16);
      inputBuffer2_regVecim(2) <= to_signed(16#0000#, 16);
      inputBuffer2_regVecim(3) <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        inputBuffer2_regVecim(0) <= inputBuffer2_regVecim_next(0);
        inputBuffer2_regVecim(1) <= inputBuffer2_regVecim_next(1);
        inputBuffer2_regVecim(2) <= inputBuffer2_regVecim_next(2);
        inputBuffer2_regVecim(3) <= inputBuffer2_regVecim_next(3);
      END IF;
    END IF;
  END PROCESS inputBuffer2_process;

  inbufferim(0) <= inputBuffer2_regVecim(0);
  inbufferim(1) <= inputBuffer2_regVecim(1);
  
  inputBuffer2_regVecim_next(0) <= to_signed(16#0000#, 16) WHEN internalReset /= '0' ELSE
      inputBuffer2_regVecim(2) WHEN validInreg /= '0' ELSE
      inputBuffer2_regVecim(0);
  
  inputBuffer2_regVecim_next(1) <= to_signed(16#0000#, 16) WHEN internalReset /= '0' ELSE
      inputBuffer2_regVecim(3) WHEN validInreg /= '0' ELSE
      inputBuffer2_regVecim(1);
  
  inputBuffer2_regVecim_next(2) <= to_signed(16#0000#, 16) WHEN internalReset /= '0' ELSE
      inmuxim(0) WHEN validInreg /= '0' ELSE
      inputBuffer2_regVecim(2);
  
  inputBuffer2_regVecim_next(3) <= to_signed(16#0000#, 16) WHEN internalReset /= '0' ELSE
      inmuxim(1) WHEN validInreg /= '0' ELSE
      inputBuffer2_regVecim(3);

  inbufferim_0 <= inbufferim(0);

  adder_add_cast_2 <= resize(inbufferim_0, 18);
  addOutregN1out_im_1_1 <= adder_add_cast_2 + addOutregN1_im_1_1;

  intdelay_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addOutregN1_im_1_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          addOutregN1_im_1_1 <= to_signed(16#00000#, 18);
        ELSIF validInreg = '1' THEN
          addOutregN1_im_1_1 <= addOutregN1out_im_1_1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_16_process;


  inbufferim_1 <= inbufferim(1);

  adder_add_cast_3 <= resize(inbufferim_1, 18);
  addOutregN1out_im_2_1 <= adder_add_cast_3 + addOutregN1_im_2_1;

  intdelay_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addOutregN1_im_2_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          addOutregN1_im_2_1 <= to_signed(16#00000#, 18);
        ELSIF validInreg = '1' THEN
          addOutregN1_im_2_1 <= addOutregN1out_im_2_1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_17_process;


  intdelay_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      part1RegN1_im2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        part1RegN1_im2 <= addOutregN1_im_2_1;
      END IF;
    END IF;
  END PROCESS intdelay_18_process;


  addOutregN1out_im_1_2 <= addOutregN1_im_1_1 + part1RegN1_im2;

  intdelay_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addOutregN1_im_1_2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          addOutregN1_im_1_2 <= to_signed(16#00000#, 18);
        ELSE 
          addOutregN1_im_1_2 <= addOutregN1out_im_1_2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_19_process;


  intdelay_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataOutIntN1_im1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          dataOutIntN1_im1 <= to_signed(16#00000#, 18);
        ELSE 
          dataOutIntN1_im1 <= addOutregN1_im_1_2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_20_process;


  addOutregN2out_im_1_1 <= dataOutIntN1_im1 + addOutregN2_im_1_1;

  intdelay_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addOutregN2_im_1_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalResetN2 = '1' THEN
          addOutregN2_im_1_1 <= to_signed(16#00000#, 18);
        ELSIF validInregN2 = '1' THEN
          addOutregN2_im_1_1 <= addOutregN2out_im_1_1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_21_process;


  addOutregN1out_im_2_2 <= addOutregN1_im_1_1 + addOutregN1_im_2_1;

  intdelay_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addOutregN1_im_2_2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          addOutregN1_im_2_2 <= to_signed(16#00000#, 18);
        ELSE 
          addOutregN1_im_2_2 <= addOutregN1out_im_2_2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_22_process;


  intdelay_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataOutIntN1_im2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          dataOutIntN1_im2 <= to_signed(16#00000#, 18);
        ELSE 
          dataOutIntN1_im2 <= addOutregN1_im_2_2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_23_process;


  addOutregN2out_im_2_1 <= dataOutIntN1_im2 + addOutregN2_im_2_1;

  intdelay_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addOutregN2_im_2_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalResetN2 = '1' THEN
          addOutregN2_im_2_1 <= to_signed(16#00000#, 18);
        ELSIF validInregN2 = '1' THEN
          addOutregN2_im_2_1 <= addOutregN2out_im_2_1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_24_process;


  intdelay_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      part1RegN2_im2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        part1RegN2_im2 <= addOutregN2_im_2_1;
      END IF;
    END IF;
  END PROCESS intdelay_25_process;


  addOutregN2out_im_1_2 <= addOutregN2_im_1_1 + part1RegN2_im2;

  intdelay_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addOutregN2_im_1_2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          addOutregN2_im_1_2 <= to_signed(16#00000#, 18);
        ELSE 
          addOutregN2_im_1_2 <= addOutregN2out_im_1_2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_26_process;


  intdelay_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataOutIntN2_im1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          dataOutIntN2_im1 <= to_signed(16#00000#, 18);
        ELSE 
          dataOutIntN2_im1 <= addOutregN2_im_1_2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_27_process;


  intdelay_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iOut_im1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalResetN3 = '1' THEN
          iOut_im1 <= to_signed(16#00000#, 18);
        ELSIF validInregN3 = '1' THEN
          iOut_im1 <= dataOutIntN2_im1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_28_process;


  addOutregN2out_im_2_2 <= addOutregN2_im_1_1 + addOutregN2_im_2_1;

  intdelay_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      addOutregN2_im_2_2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          addOutregN2_im_2_2 <= to_signed(16#00000#, 18);
        ELSE 
          addOutregN2_im_2_2 <= addOutregN2out_im_2_2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_29_process;


  intdelay_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataOutIntN2_im2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          dataOutIntN2_im2 <= to_signed(16#00000#, 18);
        ELSE 
          dataOutIntN2_im2 <= addOutregN2_im_2_2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_30_process;


  intdelay_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iOut_im2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalResetN3 = '1' THEN
          iOut_im2 <= to_signed(16#00000#, 18);
        ELSIF validInregN3 = '1' THEN
          iOut_im2 <= dataOutIntN2_im2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_31_process;


  integOut_im_tmp(0) <= iOut_im1;
  integOut_im_tmp(1) <= iOut_im2;

  outputgen: FOR k IN 0 TO 1 GENERATE
    integOut_im(k) <= std_logic_vector(integOut_im_tmp(k));
  END GENERATE;

  intdelay_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_voutreg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_voutreg <= validInregN3;
      END IF;
    END IF;
  END PROCESS intdelay_32_process;


  intdelay_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_rstoutreg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_rstoutreg <= internalResetN3;
      END IF;
    END IF;
  END PROCESS intdelay_33_process;


  vectIntValid_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vectIntValid_stateInt <= '0';
      vectIntValid_countVect <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        vectIntValid_stateInt <= vectIntValid_stateInt_next;
        IF i_rstoutreg /= '0' THEN 
          vectIntValid_countVect <= to_unsigned(16#0#, 4);
        ELSIF i_voutreg /= '0' THEN 
          vectIntValid_countVect <= vectIntValid_countVect + to_unsigned(16#1#, 4);
        END IF;
      END IF;
    END IF;
  END PROCESS vectIntValid_process;

  
  vectIntValid_stateInt_temp <= '0' WHEN i_rstoutreg /= '0' ELSE
      '1' WHEN (vectIntValid_countVect = to_unsigned(16#1#, 4)) AND (i_voutreg /= '0') ELSE
      vectIntValid_stateInt;
  i_vout <= (vectIntValid_stateInt_temp AND i_voutreg) AND hdlcoder_to_stdlogic( NOT (i_rstoutreg /= '0'));
  i_rstout <= i_rstoutreg;
  vectIntValid_stateInt_next <= vectIntValid_stateInt_temp;

END rtl;


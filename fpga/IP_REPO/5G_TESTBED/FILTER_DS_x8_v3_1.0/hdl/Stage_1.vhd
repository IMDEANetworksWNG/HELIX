-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\HBF_64_test_simulink\Stage_1.vhd
-- Created: 2021-12-08 13:38:14
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Stage_1
-- Source Path: HBF_64_test_simulink/HBF_x8/Stage 1
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.HBF_x8_pkg.ALL;

ENTITY Stage_1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
        dataIn_im                         :   IN    vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
        dataOut_im                        :   OUT   vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
        validOut                          :   OUT   std_logic
        );
END Stage_1;


ARCHITECTURE rtl OF Stage_1 IS

  -- Signals
  SIGNAL dataIn_0_re                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dataIn_0_im                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dataIn_1_re                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dataIn_1_im                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Enabled_Delay_out_1_re           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Enabled_Delay_out_1_im           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Enabled_Delay_1_reg_re           : vector_of_signed16(0 TO 5);  -- sfix16_En15 [6]
  SIGNAL Enabled_Delay_1_reg_im           : vector_of_signed16(0 TO 5);  -- sfix16_En15 [6]
  SIGNAL Enabled_Delay_out_2_re           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Enabled_Delay_out_2_im           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Enabled_Delay_1_reg_re_1         : vector_of_signed16(0 TO 5);  -- sfix16_En15 [6]
  SIGNAL Enabled_Delay_1_reg_im_1         : vector_of_signed16(0 TO 5);  -- sfix16_En15 [6]
  SIGNAL Enabled_Delay_out1_re            : vector_of_signed16(0 TO 1);  -- sfix16_En15 [2]
  SIGNAL Enabled_Delay_out1_im            : vector_of_signed16(0 TO 1);  -- sfix16_En15 [2]

BEGIN
  dataIn_0_re <= signed(dataIn_re(0));

  dataIn_0_im <= signed(dataIn_im(0));

  Enabled_Delay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Enabled_Delay_1_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Enabled_Delay_1_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      Enabled_Delay_1_reg_re_1 <= (OTHERS => to_signed(16#0000#, 16));
      Enabled_Delay_1_reg_im_1 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND validIn = '1' THEN
        Enabled_Delay_1_reg_im(0) <= dataIn_0_im;
        Enabled_Delay_1_reg_im(1 TO 5) <= Enabled_Delay_1_reg_im(0 TO 4);
        Enabled_Delay_1_reg_im_1(0) <= dataIn_1_im;
        Enabled_Delay_1_reg_im_1(1 TO 5) <= Enabled_Delay_1_reg_im_1(0 TO 4);
        Enabled_Delay_1_reg_re(0) <= dataIn_0_re;
        Enabled_Delay_1_reg_re(1 TO 5) <= Enabled_Delay_1_reg_re(0 TO 4);
        Enabled_Delay_1_reg_re_1(0) <= dataIn_1_re;
        Enabled_Delay_1_reg_re_1(1 TO 5) <= Enabled_Delay_1_reg_re_1(0 TO 4);
      END IF;
    END IF;
  END PROCESS Enabled_Delay_1_process;

  Enabled_Delay_out_1_re <= Enabled_Delay_1_reg_re(5);
  Enabled_Delay_out_1_im <= Enabled_Delay_1_reg_im(5);
  Enabled_Delay_out_2_re <= Enabled_Delay_1_reg_re_1(5);
  Enabled_Delay_out_2_im <= Enabled_Delay_1_reg_im_1(5);

  dataIn_1_re <= signed(dataIn_re(1));

  dataIn_1_im <= signed(dataIn_im(1));

  Enabled_Delay_out1_re(0) <= Enabled_Delay_out_1_re;
  Enabled_Delay_out1_re(1) <= Enabled_Delay_out_2_re;

  outputgen1: FOR k IN 0 TO 1 GENERATE
    dataOut_re(k) <= std_logic_vector(Enabled_Delay_out1_re(k));
  END GENERATE;

  Enabled_Delay_out1_im(0) <= Enabled_Delay_out_1_im;
  Enabled_Delay_out1_im(1) <= Enabled_Delay_out_2_im;

  outputgen: FOR k IN 0 TO 1 GENERATE
    dataOut_im(k) <= std_logic_vector(Enabled_Delay_out1_im(k));
  END GENERATE;

  validOut <= validIn;

END rtl;


-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\HBF_64_test_simulink\CICDecimation.vhd
-- Created: 2021-12-08 13:38:15
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CICDecimation
-- Source Path: HBF_64_test_simulink/HBF_x8/hb0a/CICDecimation
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.HBF_x8_pkg.ALL;

ENTITY CICDecimation IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
        dataIn_im                         :   IN    vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
        validOut                          :   OUT   std_logic
        );
END CICDecimation;


ARCHITECTURE rtl OF CICDecimation IS

  -- Component Declarations
  COMPONENT iSection
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataInreg_re                    :   IN    vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
          dataInreg_im                    :   IN    vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
          validInreg                      :   IN    std_logic;
          internalReset                   :   IN    std_logic;
          integOut_re                     :   OUT   vector_of_std_logic_vector18(0 TO 1);  -- sfix18_En15 [2]
          integOut_im                     :   OUT   vector_of_std_logic_vector18(0 TO 1);  -- sfix18_En15 [2]
          i_vout                          :   OUT   std_logic;
          i_rstout                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT dsSection
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          integOut_re                     :   IN    vector_of_std_logic_vector18(0 TO 1);  -- sfix18_En15 [2]
          integOut_im                     :   IN    vector_of_std_logic_vector18(0 TO 1);  -- sfix18_En15 [2]
          i_vout                          :   IN    std_logic;
          i_rstout                        :   IN    std_logic;
          dsOut_re                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          dsOut_im                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          ds_vout                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT cSection
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dsOut_re                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          dsOut_im                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          ds_vout                         :   IN    std_logic;
          internalReset                   :   IN    std_logic;
          combOut_re                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          combOut_im                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          c_vout                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT gcSection
    PORT( combOut_re                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          combOut_im                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          gcOut_re                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          gcOut_im                        :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En15
          );
  END COMPONENT;

  COMPONENT castSection
    PORT( gcOut_re                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          gcOut_im                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En13
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : iSection
    USE ENTITY work.iSection(rtl);

  FOR ALL : dsSection
    USE ENTITY work.dsSection(rtl);

  FOR ALL : cSection
    USE ENTITY work.cSection(rtl);

  FOR ALL : gcSection
    USE ENTITY work.gcSection(rtl);

  FOR ALL : castSection
    USE ENTITY work.castSection(rtl);

  -- Signals
  SIGNAL softReset                        : std_logic;
  SIGNAL dataIn_re_signed                 : vector_of_signed16(0 TO 1);  -- sfix16_En15 [2]
  SIGNAL dataIn_im_signed                 : vector_of_signed16(0 TO 1);  -- sfix16_En15 [2]
  SIGNAL dataInreg_re                     : vector_of_signed16(0 TO 1);  -- sfix16_En15 [2]
  SIGNAL dataInreg_im                     : vector_of_signed16(0 TO 1);  -- sfix16_En15 [2]
  SIGNAL dataInreg_re_1                   : vector_of_std_logic_vector16(0 TO 1);  -- ufix16 [2]
  SIGNAL dataInreg_im_1                   : vector_of_std_logic_vector16(0 TO 1);  -- ufix16 [2]
  SIGNAL validInreg                       : std_logic;
  SIGNAL integOut_re                      : vector_of_std_logic_vector18(0 TO 1);  -- ufix18 [2]
  SIGNAL integOut_im                      : vector_of_std_logic_vector18(0 TO 1);  -- ufix18 [2]
  SIGNAL i_vout                           : std_logic;
  SIGNAL i_rstout                         : std_logic;
  SIGNAL dsOut_re                         : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL dsOut_im                         : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL ds_vout                          : std_logic;
  SIGNAL combOut_re                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL combOut_im                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL c_vout                           : std_logic;
  SIGNAL rstCond_state                    : std_logic;
  SIGNAL rstCond_count                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL rstCond_stateReg                 : std_logic;
  SIGNAL rstCond_state_next               : std_logic;
  SIGNAL rstCond_count_next               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL rstCond_stateReg_next            : std_logic;
  SIGNAL rstCond_state_temp               : std_logic;
  SIGNAL validOutF                        : std_logic;
  SIGNAL invalidOut_re                    : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL invalidOut_im                    : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL gcOut_re                         : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL gcOut_im                         : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL dataOut_re_1                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dataOut_im_1                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dataOut_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL dataOut_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL dataOut_re_tmp                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL dataOut_im_tmp                   : signed(15 DOWNTO 0);  -- sfix16_En13

BEGIN
  u_iSection : iSection
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataInreg_re => dataInreg_re_1,  -- sfix16_En15 [2]
              dataInreg_im => dataInreg_im_1,  -- sfix16_En15 [2]
              validInreg => validInreg,
              internalReset => softReset,
              integOut_re => integOut_re,  -- sfix18_En15 [2]
              integOut_im => integOut_im,  -- sfix18_En15 [2]
              i_vout => i_vout,
              i_rstout => i_rstout
              );

  u_dsSection : dsSection
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              integOut_re => integOut_re,  -- sfix18_En15 [2]
              integOut_im => integOut_im,  -- sfix18_En15 [2]
              i_vout => i_vout,
              i_rstout => i_rstout,
              dsOut_re => dsOut_re,  -- sfix18_En15
              dsOut_im => dsOut_im,  -- sfix18_En15
              ds_vout => ds_vout
              );

  u_cSection : cSection
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dsOut_re => dsOut_re,  -- sfix18_En15
              dsOut_im => dsOut_im,  -- sfix18_En15
              ds_vout => ds_vout,
              internalReset => i_rstout,
              combOut_re => combOut_re,  -- sfix18_En15
              combOut_im => combOut_im,  -- sfix18_En15
              c_vout => c_vout
              );

  u_gcSection : gcSection
    PORT MAP( combOut_re => combOut_re,  -- sfix18_En15
              combOut_im => combOut_im,  -- sfix18_En15
              gcOut_re => gcOut_re,  -- sfix18_En15
              gcOut_im => gcOut_im  -- sfix18_En15
              );

  u_castSection : castSection
    PORT MAP( gcOut_re => gcOut_re,  -- sfix18_En15
              gcOut_im => gcOut_im,  -- sfix18_En15
              dataOut_re => dataOut_re_1,  -- sfix16_En13
              dataOut_im => dataOut_im_1  -- sfix16_En13
              );

  softReset <= '0';

  outputgen3: FOR k IN 0 TO 1 GENERATE
    dataIn_re_signed(k) <= signed(dataIn_re(k));
  END GENERATE;

  outputgen2: FOR k IN 0 TO 1 GENERATE
    dataIn_im_signed(k) <= signed(dataIn_im(k));
  END GENERATE;

  intdelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataInreg_re <= (OTHERS => to_signed(16#0000#, 16));
      dataInreg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          dataInreg_re <= (OTHERS => to_signed(16#0000#, 16));
          dataInreg_im <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          dataInreg_re <= dataIn_re_signed;
          dataInreg_im <= dataIn_im_signed;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  outputgen1: FOR k IN 0 TO 1 GENERATE
    dataInreg_re_1(k) <= std_logic_vector(dataInreg_re(k));
  END GENERATE;

  outputgen: FOR k IN 0 TO 1 GENERATE
    dataInreg_im_1(k) <= std_logic_vector(dataInreg_im(k));
  END GENERATE;

  intdelay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      validInreg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          validInreg <= '0';
        ELSE 
          validInreg <= validIn;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  rstCond_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rstCond_state <= '0';
      rstCond_count <= to_unsigned(16#000#, 9);
      rstCond_stateReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rstCond_state <= rstCond_state_next;
        rstCond_count <= rstCond_count_next;
        rstCond_stateReg <= rstCond_stateReg_next;
      END IF;
    END IF;
  END PROCESS rstCond_process;

  
  rstCond_state_temp <= '1' WHEN softReset /= '0' ELSE
      '0' WHEN resize(rstCond_count, 10) = to_unsigned(16#00B#, 10) ELSE
      rstCond_state;
  
  rstCond_count_next <= to_unsigned(16#000#, 9) WHEN softReset /= '0' ELSE
      rstCond_count + to_unsigned(16#001#, 9) WHEN rstCond_state_temp = '1' ELSE
      rstCond_count;
  
  validOutF <= '0' WHEN rstCond_stateReg = '1' ELSE
      c_vout;
  rstCond_stateReg_next <= rstCond_state_temp;
  rstCond_state_next <= rstCond_state_temp;

  invalidOut_re <= to_signed(16#0000#, 16);
  invalidOut_im <= to_signed(16#0000#, 16);

  dataOut_re_signed <= signed(dataOut_re_1);

  dataOut_im_signed <= signed(dataOut_im_1);

  
  dataOut_re_tmp <= invalidOut_re WHEN validOutF = '0' ELSE
      dataOut_re_signed;
  
  dataOut_im_tmp <= invalidOut_im WHEN validOutF = '0' ELSE
      dataOut_im_signed;

  dataOut_re <= std_logic_vector(dataOut_re_tmp);

  dataOut_im <= std_logic_vector(dataOut_im_tmp);

  validOut <= validOutF;

END rtl;


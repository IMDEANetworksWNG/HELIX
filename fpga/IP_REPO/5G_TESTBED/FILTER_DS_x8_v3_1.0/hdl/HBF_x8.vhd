-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\HBF_64_test_simulink\HBF_x8.vhd
-- Created: 2021-12-08 13:38:15
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2
-- Target subsystem base rate: 2
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Out1_re                       ce_out        2
-- Out1_im                       ce_out        2
-- Out2                          ce_out        2
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HBF_x8
-- Source Path: HBF_64_test_simulink/HBF_x8
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.HBF_x8_pkg.ALL;

ENTITY HBF_x8 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        hdl_in_re                         :   IN    vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
        hdl_in_im                         :   IN    vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
        valid_in                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        Out1_re                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        Out1_im                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        Out2                              :   OUT   std_logic
        );
END HBF_x8;


ARCHITECTURE rtl OF HBF_x8 IS

  -- Component Declarations
  COMPONENT Stage_1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
          dataIn_im                       :   IN    vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
          dataOut_im                      :   OUT   vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT hb0a
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          hdl_in_re                       :   IN    vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
          hdl_in_im                       :   IN    vector_of_std_logic_vector16(0 TO 1);  -- sfix16_En15 [2]
          valid_in                        :   IN    std_logic;
          Out1_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          Out1_im                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          Out2                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT hb0b
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          hdl_in_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          hdl_in_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          valid_in                        :   IN    std_logic;
          Out1_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          Out1_im                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          Out2                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT hb0c
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          hdl_in_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          hdl_in_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          valid_in                        :   IN    std_logic;
          Out1_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          Out1_im                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          Out2                            :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Stage_1
    USE ENTITY work.Stage_1(rtl);

  FOR ALL : hb0a
    USE ENTITY work.hb0a(rtl);

  FOR ALL : hb0b
    USE ENTITY work.hb0b(rtl);

  FOR ALL : hb0c
    USE ENTITY work.hb0c(rtl);

  -- Signals
  SIGNAL Stage_1_out1_re                  : vector_of_std_logic_vector16(0 TO 1);  -- ufix16 [2]
  SIGNAL Stage_1_out1_im                  : vector_of_std_logic_vector16(0 TO 1);  -- ufix16 [2]
  SIGNAL Stage_1_out2                     : std_logic;
  SIGNAL hb0a_out1_re                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL hb0a_out1_im                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL hb0a_out2                        : std_logic;
  SIGNAL hb0b_out1_re                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL hb0b_out1_im                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL hb0b_out2                        : std_logic;
  SIGNAL hb0c_out1_re                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL hb0c_out1_im                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL hb0c_out2                        : std_logic;

BEGIN
  u_Stage_1 : Stage_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              dataIn_re => hdl_in_re,  -- sfix16_En15 [2]
              dataIn_im => hdl_in_im,  -- sfix16_En15 [2]
              validIn => valid_in,
              dataOut_re => Stage_1_out1_re,  -- sfix16_En15 [2]
              dataOut_im => Stage_1_out1_im,  -- sfix16_En15 [2]
              validOut => Stage_1_out2
              );

  u_hb0a : hb0a
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              hdl_in_re => Stage_1_out1_re,  -- sfix16_En15 [2]
              hdl_in_im => Stage_1_out1_im,  -- sfix16_En15 [2]
              valid_in => Stage_1_out2,
              Out1_re => hb0a_out1_re,  -- sfix16_En15
              Out1_im => hb0a_out1_im,  -- sfix16_En15
              Out2 => hb0a_out2
              );

  u_hb0b : hb0b
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              hdl_in_re => hb0a_out1_re,  -- sfix16_En15
              hdl_in_im => hb0a_out1_im,  -- sfix16_En15
              valid_in => hb0a_out2,
              Out1_re => hb0b_out1_re,  -- sfix16_En15
              Out1_im => hb0b_out1_im,  -- sfix16_En15
              Out2 => hb0b_out2
              );

  u_hb0c : hb0c
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              hdl_in_re => hb0b_out1_re,  -- sfix16_En15
              hdl_in_im => hb0b_out1_im,  -- sfix16_En15
              valid_in => hb0b_out2,
              Out1_re => hb0c_out1_re,  -- sfix16_En15
              Out1_im => hb0c_out1_im,  -- sfix16_En15
              Out2 => hb0c_out2
              );

  ce_out <= clk_enable;

  Out1_re <= hb0c_out1_re;

  Out1_im <= hb0c_out1_im;

  Out2 <= hb0c_out2;

END rtl;


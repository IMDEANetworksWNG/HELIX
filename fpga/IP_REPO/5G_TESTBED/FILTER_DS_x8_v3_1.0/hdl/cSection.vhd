-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\HBF_64_test_simulink\cSection.vhd
-- Created: 2021-12-08 13:38:15
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: cSection
-- Source Path: HBF_64_test_simulink/HBF_x8/hb0a/CICDecimation/cSection
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY cSection IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dsOut_re                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        dsOut_im                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        ds_vout                           :   IN    std_logic;
        internalReset                     :   IN    std_logic;
        combOut_re                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        combOut_im                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        c_vout                            :   OUT   std_logic
        );
END cSection;


ARCHITECTURE rtl OF cSection IS

  -- Signals
  SIGNAL cBuff_vout1                      : std_logic;
  SIGNAL cBuff_vout2                      : std_logic;
  SIGNAL invalidOut_re_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL dsOut_re_signed                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL cDelay_re1                       : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL subtractor_sub_cast              : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL subtractor_sub_cast_1            : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL subOut_re1                       : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL cOut_re1                         : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL cBuff_re1                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL cDelay_re2                       : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL subtractor_sub_cast_2            : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL subtractor_sub_cast_3            : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL subOut_re2                       : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL cOut_re2                         : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL cBuff_re2                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL combOutreg_re                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL combOut_re_tmp                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL invalidOut_im_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL dsOut_im_signed                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL cDelay_im1                       : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL subtractor_sub_cast_4            : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL subtractor_sub_cast_5            : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL subOut_im1                       : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL cOut_im1                         : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL cBuff_im1                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL cDelay_im2                       : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL subtractor_sub_cast_6            : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL subtractor_sub_cast_7            : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL subOut_im2                       : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL cOut_im2                         : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL cBuff_im2                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL combOutreg_im                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL combOut_im_tmp                   : signed(17 DOWNTO 0);  -- sfix18_En15

BEGIN
  intdelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_vout1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_vout1 <= '0';
        ELSE 
          cBuff_vout1 <= ds_vout;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_vout2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_vout2 <= '0';
        ELSE 
          cBuff_vout2 <= cBuff_vout1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  invalidOut_re_1 <= to_signed(16#00000#, 18);

  dsOut_re_signed <= signed(dsOut_re);

  intdelay_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cDelay_re1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cDelay_re1 <= to_signed(16#00000#, 18);
        ELSIF ds_vout = '1' THEN
          cDelay_re1 <= dsOut_re_signed;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  subtractor_sub_cast <= resize(dsOut_re_signed, 19);
  subtractor_sub_cast_1 <= resize(cDelay_re1, 19);
  subOut_re1 <= subtractor_sub_cast - subtractor_sub_cast_1;

  cOut_re1 <= subOut_re1(17 DOWNTO 0);

  intdelay_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_re1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_re1 <= to_signed(16#00000#, 18);
        ELSE 
          cBuff_re1 <= cOut_re1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  intdelay_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cDelay_re2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cDelay_re2 <= to_signed(16#00000#, 18);
        ELSIF cBuff_vout1 = '1' THEN
          cDelay_re2 <= cBuff_re1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  subtractor_sub_cast_2 <= resize(cBuff_re1, 19);
  subtractor_sub_cast_3 <= resize(cDelay_re2, 19);
  subOut_re2 <= subtractor_sub_cast_2 - subtractor_sub_cast_3;

  cOut_re2 <= subOut_re2(17 DOWNTO 0);

  intdelay_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_re2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_re2 <= to_signed(16#00000#, 18);
        ELSE 
          cBuff_re2 <= cOut_re2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  
  combOutreg_re <= invalidOut_re_1 WHEN cBuff_vout2 = '0' ELSE
      cBuff_re2;

  intdelay_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      combOut_re_tmp <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          combOut_re_tmp <= to_signed(16#00000#, 18);
        ELSE 
          combOut_re_tmp <= combOutreg_re;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  combOut_re <= std_logic_vector(combOut_re_tmp);

  invalidOut_im_1 <= to_signed(16#00000#, 18);

  dsOut_im_signed <= signed(dsOut_im);

  intdelay_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cDelay_im1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cDelay_im1 <= to_signed(16#00000#, 18);
        ELSIF ds_vout = '1' THEN
          cDelay_im1 <= dsOut_im_signed;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  subtractor_sub_cast_4 <= resize(dsOut_im_signed, 19);
  subtractor_sub_cast_5 <= resize(cDelay_im1, 19);
  subOut_im1 <= subtractor_sub_cast_4 - subtractor_sub_cast_5;

  cOut_im1 <= subOut_im1(17 DOWNTO 0);

  intdelay_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_im1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_im1 <= to_signed(16#00000#, 18);
        ELSE 
          cBuff_im1 <= cOut_im1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_8_process;


  intdelay_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cDelay_im2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cDelay_im2 <= to_signed(16#00000#, 18);
        ELSIF cBuff_vout1 = '1' THEN
          cDelay_im2 <= cBuff_im1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_9_process;


  subtractor_sub_cast_6 <= resize(cBuff_im1, 19);
  subtractor_sub_cast_7 <= resize(cDelay_im2, 19);
  subOut_im2 <= subtractor_sub_cast_6 - subtractor_sub_cast_7;

  cOut_im2 <= subOut_im2(17 DOWNTO 0);

  intdelay_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cBuff_im2 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          cBuff_im2 <= to_signed(16#00000#, 18);
        ELSE 
          cBuff_im2 <= cOut_im2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_10_process;


  
  combOutreg_im <= invalidOut_im_1 WHEN cBuff_vout2 = '0' ELSE
      cBuff_im2;

  intdelay_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      combOut_im_tmp <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          combOut_im_tmp <= to_signed(16#00000#, 18);
        ELSE 
          combOut_im_tmp <= combOutreg_im;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_11_process;


  combOut_im <= std_logic_vector(combOut_im_tmp);

  intdelay_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      c_vout <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF internalReset = '1' THEN
          c_vout <= '0';
        ELSE 
          c_vout <= cBuff_vout2;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_12_process;


END rtl;

